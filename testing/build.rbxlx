<roblox version="4">
  <Item class="ReplicatedStorage" referent="0">
    <Properties>
      <string name="Name">ReplicatedStorage</string>
    </Properties>
    <Item class="Folder" referent="1">
      <Properties>
        <string name="Name">TS</string>
      </Properties>
      <Item class="ModuleScript" referent="2">
        <Properties>
          <string name="Name">module</string>
          <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- March 20, 2020, 4:41 AM Eastern Daylight Time

local exports = {};
local function makeHello(name)
	return "Hello from " .. name .. "!";
end;
exports.makeHello = makeHello;
return exports;
]]></string>
        </Properties>
      </Item>
    </Item>
    <Item class="Folder" referent="3">
      <Properties>
        <string name="Name">rbxts_include</string>
      </Properties>
      <Item class="ModuleScript" referent="4">
        <Properties>
          <string name="Name">Promise</string>
          <string name="Source"><![CDATA[--[[
	An implementation of Promises similar to Promise/A+.
	Forked from LPGhatguy/roblox-lua-promise, modified for roblox-ts.
]]

local PROMISE_DEBUG = false

--[[
	Packs a number of arguments into a table and returns its length.

	Used to cajole varargs without dropping sparse values.
]]
local function pack(...)
	local len = select("#", ...)

	return len, { ... }
end

--[[
	wpcallPacked is a version of xpcall that:
	* Returns the length of the result first
	* Returns the result packed into a table
	* Passes extra arguments through to the passed function; xpcall doesn't
	* Issues a warning if PROMISE_DEBUG is enabled
]]
local function wpcallPacked(f, ...)
	local argsLength, args = pack(...)

	local body = function()
		return f(unpack(args, 1, argsLength))
	end

	local resultLength, result = pack(xpcall(body, debug.traceback))

	-- If promise debugging is on, warn whenever a pcall fails.
	-- This is useful for debugging issues within the Promise implementation
	-- itself.
	if PROMISE_DEBUG and not result[1] then
		warn(result[2])
	end

	return resultLength, result
end

--[[
	Creates a function that invokes a callback with correct error handling and
	resolution mechanisms.
]]
local function createAdvancer(callback, resolve, reject)
	return function(...)
		local resultLength, result = wpcallPacked(callback, ...)
		local ok = result[1]

		if ok then
			resolve(unpack(result, 2, resultLength))
		else
			reject(unpack(result, 2, resultLength))
		end
	end
end

local function isEmpty(t)
	return next(t) == nil
end

local function createSymbol(name)
	assert(type(name) == "string", "createSymbol requires `name` to be a string.")

	local symbol = newproxy(true)

	getmetatable(symbol).__tostring = function()
		return ("Symbol(%s)"):format(name)
	end

	return symbol
end

local PromiseMarker = createSymbol("PromiseMarker")

local Promise = {}
Promise.prototype = {}
Promise.__index = Promise.prototype

Promise.Status = {
	Started = createSymbol("Started"),
	Resolved = createSymbol("Resolved"),
	Rejected = createSymbol("Rejected"),
	Cancelled = createSymbol("Cancelled"),
}

--[[
	Constructs a new Promise with the given initializing callback.

	This is generally only called when directly wrapping a non-promise API into
	a promise-based version.

	The callback will receive 'resolve' and 'reject' methods, used to start
	invoking the promise chain.

	For example:

		local function get(url)
			return Promise.new(function(resolve, reject)
				spawn(function()
					resolve(HttpService:GetAsync(url))
				end)
			end)
		end

		get("https://google.com")
			:andThen(function(stuff)
				print("Got some stuff!", stuff)
			end)

	Second parameter, parent, is used internally for tracking the "parent" in a
	promise chain. External code shouldn't need to worry about this.
]]
function Promise.new(callback, parent)
	if parent ~= nil and not Promise.is(parent) then
		error("Argument #2 to Promise.new must be a promise or nil", 2)
	end

	local self = {
		-- Used to locate where a promise was created
		_source = debug.traceback(),

		-- A tag to identify us as a promise
		[PromiseMarker] = true,

		_status = Promise.Status.Started,

		-- A table containing a list of all results, whether success or failure.
		-- Only valid if _status is set to something besides Started
		_values = nil,

		-- Lua doesn't like sparse arrays very much, so we explicitly store the
		-- length of _values to handle middle nils.
		_valuesLength = -1,

		-- If an error occurs with no observers, this will be set.
		_unhandledRejection = false,

		-- Queues representing functions we should invoke when we update!
		_queuedResolve = {},
		_queuedReject = {},
		_queuedFinally = {},

		-- The function to run when/if this promise is cancelled.
		_cancellationHook = nil,

		-- The "parent" of this promise in a promise chain. Required for
		-- cancellation propagation.
		_parent = parent,

		-- The number of consumers attached to this promise. This is needed so that
		-- we don't propagate promise cancellations when there are still uncancelled
		-- consumers.
		_numConsumers = 0,
	}

	setmetatable(self, Promise)

	local function resolve(...)
		self:_resolve(...)
	end

	local function reject(...)
		self:_reject(...)
	end

	local function onCancel(cancellationHook)
		assert(type(cancellationHook) == "function", "onCancel must be called with a function as its first argument.")

		if self._status == Promise.Status.Cancelled then
			cancellationHook()
		else
			self._cancellationHook = cancellationHook
		end
	end

	local _, result = wpcallPacked(callback, resolve, reject, onCancel)
	local ok = result[1]
	local err = result[2]

	if not ok and self._status == Promise.Status.Started then
		reject(err)
	end

	return self
end

--[[
	Fast spawn: Spawns a thread with predictable timing.
	Runs immediately instead of first cycle being deferred.
]]
function Promise.spawn(callback, ...)
	local spawnBindable = Instance.new("BindableEvent")
	local args = { ... }
	local length = select("#", ...)
	spawnBindable.Event:Connect(function()
		callback(unpack(args, 1, length))
	end)
	spawnBindable:Fire()
	spawnBindable:Destroy()
end

--[[
	Create a promise that represents the immediately resolved value.
]]
function Promise.resolve(value)
	return Promise.new(function(resolve)
		resolve(value)
	end)
end

--[[
	Create a promise that represents the immediately rejected value.
]]
function Promise.reject(value)
	return Promise.new(function(_, reject)
		reject(value)
	end)
end

--[[
	Returns a new promise that:
		* is resolved when all input promises resolve
		* is rejected if ANY input promises reject
]]
function Promise.all(promises)
	if type(promises) ~= "table" then
		error("Please pass a list of promises to Promise.all", 2)
	end

	-- If there are no values then return an already resolved promise.
	if #promises == 0 then
		return Promise.resolve({})
	end

	-- We need to check that each value is a promise here so that we can produce
	-- a proper error rather than a rejected promise with our error.
	for i = 1, #promises do
		if not Promise.is(promises[i]) then
			error(("Non-promise value passed into Promise.all at index #%d"):format(i), 2)
		end
	end

	return Promise.new(function(resolve, reject)
		-- An array to contain our resolved values from the given promises.
		local resolvedValues = {}

		-- Keep a count of resolved promises because just checking the resolved
		-- values length wouldn't account for promises that resolve with nil.
		local resolvedCount = 0

		-- Called when a single value is resolved and resolves if all are done.
		local function resolveOne(i, ...)
			resolvedValues[i] = ...
			resolvedCount = resolvedCount + 1

			if resolvedCount == #promises then
				resolve(resolvedValues)
			end
		end

		-- We can assume the values inside `promises` are all promises since we
		-- checked above.
		for i = 1, #promises do
			promises[i]:andThen(
				function(...)
					resolveOne(i, ...)
				end,
				function(...)
					reject(...)
				end
			)
		end
	end)
end

--[[
	Is the given object a Promise instance?
]]
function Promise.is(object)
	if type(object) ~= "table" then
		return false
	end

	return object[PromiseMarker] == true
end

function Promise.prototype:getStatus()
	return self._status
end

function Promise.prototype:isRejected()
	return self._status == Promise.Status.Rejected
end

function Promise.prototype:isResolved()
	return self._status == Promise.Status.Resolved
end

function Promise.prototype:isPending()
	return self._status == Promise.Status.Started
end

function Promise.prototype:isCancelled()
	return self._status == Promise.Status.Cancelled
end

--[[
	Creates a new promise that receives the result of this promise.

	The given callbacks are invoked depending on that result.
]]
function Promise.prototype:andThen(successHandler, failureHandler)
	self._unhandledRejection = false
	self._numConsumers = self._numConsumers + 1

	-- Create a new promise to follow this part of the chain
	return Promise.new(function(resolve, reject)
		-- Our default callbacks just pass values onto the next promise.
		-- This lets success and failure cascade correctly!

		local successCallback = resolve
		if successHandler then
			successCallback = createAdvancer(successHandler, resolve, reject)
		end

		local failureCallback = reject
		if failureHandler then
			failureCallback = createAdvancer(failureHandler, resolve, reject)
		end

		if self._status == Promise.Status.Started then
			-- If we haven't resolved yet, put ourselves into the queue
			table.insert(self._queuedResolve, successCallback)
			table.insert(self._queuedReject, failureCallback)
		elseif self._status == Promise.Status.Resolved then
			-- This promise has already resolved! Trigger success immediately.
			successCallback(unpack(self._values, 1, self._valuesLength))
		elseif self._status == Promise.Status.Rejected then
			-- This promise died a terrible death! Trigger failure immediately.
			failureCallback(unpack(self._values, 1, self._valuesLength))
		elseif self._status == Promise.Status.Cancelled then
			-- We don't want to call the success handler or the failure handler,
			-- we just reject this promise outright.
			reject("Promise is cancelled")
		end
	end, self)
end

--[[
	Used to catch any errors that may have occurred in the promise.
]]
function Promise.prototype:catch(failureCallback)
	return self:andThen(nil, failureCallback)
end

--[[
	Cancels the promise, disallowing it from rejecting or resolving, and calls
	the cancellation hook if provided.
]]
function Promise.prototype:cancel()
	if self._status ~= Promise.Status.Started then
		return
	end

	self._status = Promise.Status.Cancelled

	if self._cancellationHook then
		self._cancellationHook()
	end

	if self._parent then
		self._parent:_consumerCancelled()
	end

	self:_finalize()
end

--[[
	Used to decrease the number of consumers by 1, and if there are no more,
	cancel this promise.
]]
function Promise.prototype:_consumerCancelled()
	self._numConsumers = self._numConsumers - 1

	if self._numConsumers <= 0 then
		self:cancel()
	end
end

--[[
	Used to set a handler for when the promise resolves, rejects, or is
	cancelled. Returns a new promise chained from this promise.
]]
function Promise.prototype:finally(finallyHandler)
	self._numConsumers = self._numConsumers + 1

	-- Return a promise chained off of this promise
	return Promise.new(function(resolve, reject)
		local finallyCallback = resolve
		if finallyHandler then
			finallyCallback = createAdvancer(finallyHandler, resolve, reject)
		end

		if self._status == Promise.Status.Started then
			-- The promise is not settled, so queue this.
			table.insert(self._queuedFinally, finallyCallback)
		else
			-- The promise already settled or was cancelled, run the callback now.
			finallyCallback()
		end
	end, self)
end

--[[
	Yield until the promise is completed.

	This matches the execution model of normal Roblox functions.
]]
function Promise.prototype:await()
	self._unhandledRejection = false

	if self._status == Promise.Status.Started then
		local result
		local resultLength
		local bindable = Instance.new("BindableEvent")

		self:andThen(
			function(...)
				resultLength, result = pack(...)
				bindable:Fire(true)
			end,
			function(...)
				resultLength, result = pack(...)
				bindable:Fire(false)
			end
		)
		self:finally(function()
			bindable:Fire(nil)
		end)

		local ok = bindable.Event:Wait()
		bindable:Destroy()

		if ok == nil then
			-- If cancelled, we return nil.
			return nil
		end

		return ok, unpack(result, 1, resultLength)
	elseif self._status == Promise.Status.Resolved then
		return true, unpack(self._values, 1, self._valuesLength)
	elseif self._status == Promise.Status.Rejected then
		return false, unpack(self._values, 1, self._valuesLength)
	end

	-- If the promise is cancelled, fall through to nil.
	return nil
end

--[[
	Intended for use in tests.

	Similar to await(), but instead of yielding if the promise is unresolved,
	_unwrap will throw. This indicates an assumption that a promise has
	resolved.
]]
function Promise.prototype:_unwrap()
	if self._status == Promise.Status.Started then
		error("Promise has not resolved or rejected.", 2)
	end

	local success = self._status == Promise.Status.Resolved

	return success, unpack(self._values, 1, self._valuesLength)
end

function Promise.prototype:_resolve(...)
	if self._status ~= Promise.Status.Started then
		return
	end

	-- If the resolved value was a Promise, we chain onto it!
	if Promise.is((...)) then
		-- Without this warning, arguments sometimes mysteriously disappear
		if select("#", ...) > 1 then
			local message = (
				"When returning a Promise from andThen, extra arguments are " ..
				"discarded! See:\n\n%s"
			):format(
				self._source
			)
			warn(message)
		end

		(...):andThen(
			function(...)
				self:_resolve(...)
			end,
			function(...)
				self:_reject(...)
			end
		)

		return
	end

	self._status = Promise.Status.Resolved
	self._valuesLength, self._values = pack(...)

	-- We assume that these callbacks will not throw errors.
	for _, callback in ipairs(self._queuedResolve) do
		callback(...)
	end

	self:_finalize()
end

function Promise.prototype:_reject(...)
	if self._status ~= Promise.Status.Started then
		return
	end

	self._status = Promise.Status.Rejected
	self._valuesLength, self._values = pack(...)

	-- If there are any rejection handlers, call those!
	if not isEmpty(self._queuedReject) then
		-- We assume that these callbacks will not throw errors.
		for _, callback in ipairs(self._queuedReject) do
			callback(...)
		end
	else
		-- At this point, no one was able to observe the error.
		-- An error handler might still be attached if the error occurred
		-- synchronously. We'll wait one tick, and if there are still no
		-- observers, then we should put a message in the console.

		self._unhandledRejection = true
		local err = tostring((...))

		spawn(function()
			-- Someone observed the error, hooray!
			if not self._unhandledRejection then
				return
			end

			-- Build a reasonable message
			local message = ("Unhandled promise rejection:\n\n%s\n\n%s"):format(
				err,
				self._source
			)
			warn(message)
		end)
	end

	self:_finalize()
end

--[[
	Calls any :finally handlers. We need this to be a separate method and
	queue because we must call all of the finally callbacks upon a success,
	failure, *and* cancellation.
]]
function Promise.prototype:_finalize()
	for _, callback in ipairs(self._queuedFinally) do
		-- Purposefully not passing values to callbacks here, as it could be the
		-- resolved values, or rejected errors. If the developer needs the values,
		-- they should use :andThen or :catch explicitly.
		callback()
	end
end

return Promise
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="5">
        <Properties>
          <string name="Name">RuntimeLib</string>
          <string name="Source"><![CDATA[local Promise = require(script.Parent.Promise)

local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")

local ReplicatedFirst
if not __LEMUR__ then
	ReplicatedFirst = game:GetService("ReplicatedFirst")
end

local TS = {}

-- runtime classes
TS.Promise = Promise

local Symbol do
	Symbol = {}
	Symbol.__index = Symbol
	setmetatable(Symbol, {
		__call = function(_, description)
			local self = setmetatable({}, Symbol)
			self.description = "Symbol(" .. (description or "") .. ")"
			return self
		end
	})

	local symbolRegistry = setmetatable({}, {
		__index = function(self, k)
			self[k] = Symbol(k)
			return self[k]
		end
	})

	function Symbol:toString()
		return self.description
	end

	Symbol.__tostring = Symbol.toString

	-- Symbol.for
	function Symbol.getFor(key)
		return symbolRegistry[key]
	end

	function Symbol.keyFor(goalSymbol)
		for key, symbol in pairs(symbolRegistry) do
			if symbol == goalSymbol then
				return key
			end
		end
	end
end

TS.Symbol = Symbol
TS.Symbol_iterator = Symbol("Symbol.iterator")

local function isPlugin(object)
	return RunService:IsStudio() and object:FindFirstAncestorWhichIsA("Plugin") ~= nil
end

-- module resolution
function TS.getModule(object, moduleName)
	if not __LEMUR__ and object:IsDescendantOf(ReplicatedFirst) then
		warn("roblox-ts packages should not be used from ReplicatedFirst!")
	end

	-- ensure modules have fully replicated
	if not __LEMUR__ and RunService:IsClient() and not isPlugin(object) and not game:IsLoaded() then
		game.Loaded:Wait()
	end

	local globalModules = script.Parent:FindFirstChild("node_modules")
	if not globalModules then
		error("Could not find any modules!", 2)
	end

	repeat
		local modules = object:FindFirstChild("node_modules")
		if modules then
			local module = modules:FindFirstChild(moduleName)
			if module then
				return module
			end
		end
		object = object.Parent
	until object == nil or object == globalModules

	return globalModules:FindFirstChild(moduleName) or error("Could not find module: " .. moduleName, 2)
end

-- This is a hash which TS.import uses as a kind of linked-list-like history of [Script who Loaded] -> Library
local currentlyLoading = {}
local registeredLibraries = {}

function TS.import(caller, module, ...)
	for i = 1, select("#", ...) do
		module = module:WaitForChild((select(i, ...)))
	end

	if module.ClassName ~= "ModuleScript" then
		error("Failed to import! Expected ModuleScript, got " .. module.ClassName, 2)
	end

	currentlyLoading[caller] = module

	-- Check to see if a case like this occurs:
	-- module -> Module1 -> Module2 -> module

	-- WHERE currentlyLoading[module] is Module1
	-- and currentlyLoading[Module1] is Module2
	-- and currentlyLoading[Module2] is module

	local currentModule = module
	local depth = 0

	while currentModule do
		depth = depth + 1
		currentModule = currentlyLoading[currentModule]

		if currentModule == module then
			local str = currentModule.Name -- Get the string traceback

			for _ = 1, depth do
				currentModule = currentlyLoading[currentModule]
				str = str .. "  ⇒ " .. currentModule.Name
			end

			error("Failed to import! Detected a circular dependency chain: " .. str, 2)
		end
	end

	if not registeredLibraries[module] then
		if _G[module] then
			error("Invalid module access! Do you have two TS runtimes trying to import this? " .. module:GetFullName(), 2)
		end

		_G[module] = TS
		registeredLibraries[module] = true -- register as already loaded for subsequent calls
	end

	local data = require(module)

	if currentlyLoading[caller] == module then -- Thread-safe cleanup!
		currentlyLoading[caller] = nil
	end

	return data
end

function TS.exportNamespace(module, ancestor)
	for key, value in pairs(module) do
		ancestor[key] = value
	end
end

-- general utility functions
function TS.instanceof(obj, class)
	-- custom Class.instanceof() check
	if type(class) == "table" and type(class.instanceof) == "function" then
		return class.instanceof(obj)
	end

	-- metatable check
	if type(obj) == "table" then
		obj = getmetatable(obj)
		while obj ~= nil do
			if obj == class then
				return true
			end
			local mt = getmetatable(obj)
			if mt then
				obj = mt.__index
			else
				obj = nil
			end
		end
	end

	return false
end

function TS.async(callback)
	return function(...)
		local n = select("#", ...)
		local args = { ... }
		return Promise.new(function(resolve, reject)
			coroutine.wrap(function()
				local ok, result = pcall(callback, unpack(args, 1, n))
				if ok then
					resolve(result)
				else
					reject(result)
				end
			end)()
		end)
	end
end

function TS.await(promise)
	if not Promise.is(promise) then
		return promise
	end

	local ok, result = promise:await()
	if ok then
		return result
	else
		error(ok == nil and "The awaited Promise was cancelled" or result, 2)
	end
end

function TS.add(a, b)
	if type(a) == "string" or type(b) == "string" then
		return a .. b
	else
		return a + b
	end
end

function TS.bit_lrsh(a, b)
	local absA = math.abs(a)
	local result = bit32.rshift(absA, b)
	if a == absA then
		return result
	else
		return -result - 1
	end
end

-- utility functions
local function copy(object)
	local result = {}
	for k, v in pairs(object) do
		result[k] = v
	end
	return result
end

local function deepCopyHelper(object, encountered)
	local result = {}
	encountered[object] = result

	for k, v in pairs(object) do
		if type(k) == "table" then
			k = encountered[k] or deepCopyHelper(k, encountered)
		end

		if type(v) == "table" then
			v = encountered[v] or deepCopyHelper(v, encountered)
		end

		result[k] = v
	end

	return result
end

local function deepCopy(object)
	return deepCopyHelper(object, {})
end

local function deepEquals(a, b)
	-- a[k] == b[k]
	for k in pairs(a) do
		local av = a[k]
		local bv = b[k]
		if type(av) == "table" and type(bv) == "table" then
			local result = deepEquals(av, bv)
			if not result then
				return false
			end
		elseif av ~= bv then
			return false
		end
	end

	-- extra keys in b
	for k in pairs(b) do
		if a[k] == nil then
			return false
		end
	end

	return true
end

-- Object static functions

function TS.Object_keys(object)
	local result = {}
	for key in pairs(object) do
		result[#result + 1] = key
	end
	return result
end

function TS.Object_values(object)
	local result = {}
	for _, value in pairs(object) do
		result[#result + 1] = value
	end
	return result
end

function TS.Object_entries(object)
	local result = {}
	for key, value in pairs(object) do
		result[#result + 1] = { key, value }
	end
	return result
end

function TS.Object_assign(toObj, ...)
	for i = 1, select("#", ...) do
		local arg = select(i, ...)
		if type(arg) == "table" then
			for key, value in pairs(arg) do
				toObj[key] = value
			end
		end
	end
	return toObj
end

TS.Object_copy = copy

TS.Object_deepCopy = deepCopy

TS.Object_deepEquals = deepEquals

local function toString(data)
	return HttpService:JSONEncode(data)
end

TS.Object_toString = toString

-- string macro functions
function TS.string_find_wrap(a, b, ...)
	if a then
		return a - 1, b - 1, ...
	end
end

-- array macro functions
local function array_copy(list)
	local result = {}
	for i = 1, #list do
		result[i] = list[i]
	end
	return result
end

TS.array_copy = array_copy

function TS.array_entries(list)
	local result = {}
	for key = 1, #list do
		result[key] = { key - 1, list[key] }
	end
	return result
end

function TS.array_forEach(list, callback)
	for i = 1, #list do
		callback(list[i], i - 1, list)
	end
end

local function array_map(list, callback)
	local result = {}
	for i = 1, #list do
		result[i] = callback(list[i], i - 1, list)
	end
	return result
end

TS.array_map = array_map

function TS.array_mapFiltered(list, callback)
    local new = {}
    local index = 1

    for i = 1, #list do
        local result = callback(list[i], i - 1, list)

        if result ~= nil then
            new[index] = result
            index = index + 1
        end
    end

    return new
end

local function getArraySizeSlow(list)
    local result = 0
    for index in pairs(list) do
        if index > result then
            result = index
        end
    end
    return result
end

function TS.array_filterUndefined(list)
	local length = 0
	local result = {}
	for i = 1, getArraySizeSlow(list) do
		local value = list[i]
		if value ~= nil then
			length = length + 1
			result[length] = value
		end
	end
	return result
end

function TS.array_filter(list, callback)
	local result = {}
	for i = 1, #list do
		local v = list[i]
		if callback(v, i - 1, list) == true then
			result[#result + 1] = v
		end
	end
	return result
end

function TS.array_sort(list, callback)
	table.sort(list, callback)
	return list
end

TS.array_toString = toString

function TS.array_slice(list, startI, endI)
	local length = #list

	if startI == nil then startI = 0 end
	if endI == nil then endI = length end

	if startI < 0 then startI = length + startI end
	if endI < 0 then endI = length + endI end

	local result = {}

	for i = startI + 1, endI do
		result[i - startI] = list[i]
	end

	return result
end

function TS.array_splice(list, start, deleteCount, ...)
	local len = #list
	local actualStart
	if start < 0 then
		actualStart = len + start
		if actualStart < 0 then
			actualStart = 0
		end
	else
		if start < len then
			actualStart = start
		else
			actualStart = len
		end
	end
	local items = { ... }
	local itemCount = #items
	local actualDeleteCount
	if start == nil then
		actualDeleteCount = 0
	elseif deleteCount == nil then
		actualDeleteCount = len - actualStart
	else
		if deleteCount < 0 then
			deleteCount = 0
		end
		actualDeleteCount = len - actualStart
		if deleteCount < actualDeleteCount then
			actualDeleteCount = deleteCount
		end
	end
	local out = {}
	local k = 0
	while k < actualDeleteCount do
		local from = actualStart + k
		if list[from + 1] then
			out[k + 1] = list[from + 1]
		end
		k = k + 1
	end
	if itemCount < actualDeleteCount then
		k = actualStart
		while k < len - actualDeleteCount do
			local from = k + actualDeleteCount
			local to = k + itemCount
			if list[from + 1] then
				list[to + 1] = list[from + 1]
			else
				list[to + 1] = nil
			end
			k = k + 1
		end
		k = len
		while k > len - actualDeleteCount + itemCount do
			list[k] = nil
			k = k - 1
		end
	elseif itemCount > actualDeleteCount then
		k = len - actualDeleteCount
		while k > actualStart do
			local from = k + actualDeleteCount
			local to = k + itemCount
			if list[from] then
				list[to] = list[from]
			else
				list[to] = nil
			end
			k = k - 1
		end
	end
	k = actualStart
	for i = 1, #items do
		list[k + 1] = items[i]
		k = k + 1
	end
	k = #list
	while k > len - actualDeleteCount + itemCount do
		list[k] = nil
		k = k - 1
	end
	return out
end

function TS.array_some(list, callback)
	for i = 1, #list do
		if callback(list[i], i - 1, list) == true then
			return true
		end
	end
	return false
end

function TS.array_every(list, callback)
	for i = 1, #list do
		if not callback(list[i], i - 1, list) then
			return false
		end
	end
	return true
end

function TS.array_includes(list, item, startingIndex)
	for i = (startingIndex or 0) + 1, #list do
		if list[i] == item then
			return true
		end
	end
	return false
end

function TS.array_indexOf(list, value, fromIndex)
	for i = (fromIndex or 0) + 1, #list do
		if value == list[i] then
			return i - 1
		end
	end
	return -1
end

function TS.array_lastIndexOf(list, value, fromIndex)
	for i = (fromIndex or #list - 1) + 1, 1, -1 do
		if value == list[i] then
			return i - 1
		end
	end
	return -1
end

function TS.array_reverse(list)
	local result = {}
	local length = #list
	local n = length + 1
	for i = 1, length do
		result[i] = list[n - i]
	end
	return result
end

function TS.array_reduce(list, callback, ...)
	local first = 1
	local last = #list
	local accumulator
	-- support `nil` initialValues
	if select("#", ...) == 0 then
		if last == 0 then
			error("Reduce of empty array with no initial value at Array.reduce", 2)
		end
		accumulator = list[first]
		first = first + 1
	else
		accumulator = ...
	end
	for i = first, last do
		accumulator = callback(accumulator, list[i], i - 1, list)
	end
	return accumulator
end

function TS.array_reduceRight(list, callback, ...)
	local first = #list
	local last = 1
	local accumulator
	-- support `nil` initialValues
	if select("#", ...) == 0 then
		if first == 0 then
			error("Reduce of empty array with no initial value at Array.reduceRight", 2)
		end
		accumulator = list[first]
		first = first - 1
	else
		accumulator = ...
	end
	for i = first, last, -1 do
		accumulator = callback(accumulator, list[i], i - 1, list)
	end
	return accumulator
end

function TS.array_unshift(list, ...)
	local n = #list
	local argsLength = select("#", ...)
	for i = n, 1, -1 do
		list[i + argsLength] = list[i]
	end
	for i = 1, argsLength do
		list[i] = select(i, ...)
	end
	return n + argsLength
end

local function array_push_apply(list, ...)
	local len = #list
	for i = 1, select("#", ...) do
		local list2 = select(i, ...)
		local len2 = #list2
		for j = 1, len2 do
			list[len + j] = list2[j]
		end
		len = len + len2
	end
	return len
end

TS.array_push_apply = array_push_apply

function TS.array_push_stack(list, ...)
	local len = #list
	local len2 = select("#", ...)
	for i = 1, len2 do
		list[len + i] = select(i, ...)
	end
	return len + len2
end

function TS.array_concat(...)
	local result = {}
	array_push_apply(result, ...)
	return result
end

function TS.array_join(list, separator)
	return table.concat(array_map(list, tostring), separator or ",")
end

function TS.array_find(list, callback)
	for i = 1, #list do
		local v = list[i]
		if callback(v, i - 1, list) == true then
			return v
		end
	end
end

function TS.array_findIndex(list, callback)
	for i = 0, #list - 1 do
		if callback(list[i + 1], i, list) == true then
			return i
		end
	end
	return -1
end

local function array_flat_helper(list, depth, count, result)
	for i = 1, #list do
		local v = list[i]

		if type(v) == "table" and depth ~= 0 then
			count = array_flat_helper(v, depth - 1, count, result)
		else
			count = count + 1
			result[count] = v
		end
	end

	return count
end

function TS.array_flat(list, depth)
	local result = {}
	array_flat_helper(list, depth or 1, 0, result)
	return result
end

function TS.array_fill(list, value, from, to)
	local length = #list

	if from == nil then
		from = 0
	elseif from < 0 then
		from = from + length
	end

	if to == nil or to > length then
		to = length
	elseif to < 0 then
		to = to + length
	end

	for i = from + 1, to do
		list[i] = value
	end

	return list
end

function TS.array_copyWithin(list, target, from, to)
	local length = #list

	if target < 0 then
		target = target + length
	end

	if from == nil then
		from = 0
	elseif from < 0 then
		from = from + length
	end

	if to == nil or to > length then
		to = length
	elseif to < 0 then
		to = to + length
	end

	local tf = target - from
	local overshoot = to + tf - length

	if overshoot > 0 then
		to = from + length - target
	end

	for i = to, from + 1, -1 do
		list[i + tf] = list[i]
	end

	return list
end

TS.array_deepCopy = deepCopy

TS.array_deepEquals = deepEquals

-- map macro functions

function TS.map_new(pairs)
	local result = {}
	if pairs then
		for i = 1, #pairs do
			local pair = pairs[i]
			result[pair[1]] = pair[2]
		end
	end
	return result
end

function TS.map_clear(map)
	for key in pairs(map) do
		map[key] = nil
	end
end

local function getNumKeys(map)
	local result = 0
	for _ in pairs(map) do
		result = result + 1
	end
	return result
end

TS.map_size = getNumKeys
TS.map_entries = TS.Object_entries

function TS.map_forEach(map, callback)
	for key, value in pairs(map) do
		callback(value, key, map)
	end
end

TS.map_keys = TS.Object_keys

TS.map_values = TS.Object_values
TS.map_toString = toString

-- set macro functions

function TS.set_new(values)
	local result = {}
	if values then
		for i = 1, #values do
			result[values[i]] = true
		end
	end
	return result
end

TS.set_clear = TS.map_clear

function TS.set_forEach(set, callback)
	for key in pairs(set) do
		callback(key, key, set)
	end
end

function TS.set_union(set1, set2)
	local result = {}

	for value in pairs(set1) do
		result[value] = true
	end

	for value in pairs(set2) do
		result[value] = true
	end

	return result
end

function TS.set_intersect(set1, set2)
	local result = {}

	for value in pairs(set1) do
		if set2[value] then
			result[value] = true
		end
	end

	return result
end

function TS.set_isDisjointWith(set1, set2)
	for value in pairs(set1) do
		if set2[value] then
			return false
		end
	end
	return true
end

function TS.set_isSubsetOf(set1, set2)
	for value in pairs(set1) do
		if set2[value] == nil then
			return false
		end
	end

	return true
end

function TS.set_difference(set1, set2)
	local result = {}
	for value in pairs(set1) do
		if set2[value] == nil then
			result[value] = true
		end
	end
	return result
end

TS.set_values = TS.Object_keys

TS.set_size = getNumKeys

TS.set_toString = toString

-- spread cache functions
function TS.string_spread(str)
	local results = {}
	local count = 0
	for char in string.gmatch(str, "[%z\1-\127\194-\244][\128-\191]*") do
		count = count + 1
		results[count] = char
	end
	return results
end

function TS.iterableCache(iter)
	local results = {}
	local count = 0
	for _0 in iter.next do
		if _0.done then break end
		count = count + 1
		results[count] = _0.value
	end
	return results
end

local function package(...)
	return select("#", ...), {...}
end

function TS.iterableFunctionCache(iter)
	local results = {}
	local count = 0

	while true do
		local size, t = package(iter());
		if size == 0 then break end
		count = count + 1
		results[count] = t
	end

	return results
end

-- roact functions

function TS.Roact_combine(...)
	local args = { ... }
	local result = {}
	for i = 1, #args do
		for key, value in pairs(args[i]) do
			if (type(key) == "number") then
				table.insert(result, value)
			else
				result[key] = value
			end
		end
	end
	return result
end

-- opcall

function TS.opcall(func, ...)
	local success, valueOrErr = pcall(func, ...)
	if success then
		return {
			success = true,
			value = valueOrErr,
		}
	else
		return {
			success = false,
			error = valueOrErr,
		}
	end
end

return TS
]]></string>
        </Properties>
      </Item>
      <Item class="Folder" referent="6">
        <Properties>
          <string name="Name">node_modules</string>
        </Properties>
        <Item class="ModuleScript" referent="7">
          <Properties>
            <string name="Name">services</string>
            <string name="Source">return setmetatable({}, {
    __index = function(self, serviceName)
        local service = game:GetService(serviceName);
        self[serviceName] = service;
        return service;
    end;
})</string>
          </Properties>
        </Item>
        <Item class="Folder" referent="8">
          <Properties>
            <string name="Name">touch-screen-joysticks</string>
          </Properties>
          <Item class="Folder" referent="9">
            <Properties>
              <string name="Name">node_modules</string>
            </Properties>
            <Item class="Folder" referent="10">
              <Properties>
                <string name="Name">dumpster</string>
              </Properties>
              <Item class="ModuleScript" referent="11">
                <Properties>
                  <string name="Name">Dumpster</string>
                  <string name="Source"><![CDATA[local DESTROY_METHODS = { "destroy", "Destroy", "Disconnect" }

local Dumpster = {} do
	Dumpster.__index = Dumpster

	local finalizers = {
		["function"] = function(item)
			item()
		end,
		["Instance"] = function(item)
			item:Destroy()
		end,
		["RBXScriptConnection"] = function(item)
			item:Disconnect()
		end,
		["table"] = function(item)
			for _, methodName in ipairs(DESTROY_METHODS) do
				if item[methodName] then
					item[methodName](item)
				end
			end
		end
	}

	function Dumpster.new()
		return setmetatable({}, Dumpster)
	end

	function Dumpster:dump(item, finalizer)
		self[item] = finalizer or finalizers[typeof(item)]
		return self
	end

	function Dumpster:burn()
		local item, finalizer = next(self)
		while item ~= nil do
			finalizer(item)
			self[item] = nil
			item, finalizer = next(self)
		end
	end

	Dumpster.destroy = Dumpster.burn
end

return {
	Dumpster = Dumpster
}
]]></string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="12">
              <Properties>
                <string name="Name">services</string>
                <string name="Source">return setmetatable({}, {
    __index = function(self, serviceName)
        local service = game:GetService(serviceName);
        self[serviceName] = service;
        return service;
    end;
})</string>
              </Properties>
            </Item>
            <Item class="Folder" referent="13">
              <Properties>
                <string name="Name">signals-tooling</string>
              </Properties>
              <Item class="Folder" referent="14">
                <Properties>
                  <string name="Name">node_modules</string>
                </Properties>
                <Item class="Folder" referent="15">
                  <Properties>
                    <string name="Name">@rbxts</string>
                  </Properties>
                  <Item class="ModuleScript" referent="16">
                    <Properties>
                      <string name="Name">services</string>
                      <string name="Source">return setmetatable({}, {
    __index = function(self, serviceName)
        local service = game:GetService(serviceName);
        self[serviceName] = service;
        return service;
    end;
})</string>
                    </Properties>
                  </Item>
                </Item>
              </Item>
              <Item class="ModuleScript" referent="17">
                <Properties>
                  <string name="Name">out</string>
                  <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- January 24, 2020, 10:55 PM Pacific Standard Time

local TS = _G[script];
local exports = {};
TS.exportNamespace(TS.import(script, script, "Implementation", "ConnectionManager"), exports);
TS.exportNamespace(TS.import(script, script, "Implementation", "Signal"), exports);
TS.exportNamespace(TS.import(script, script, "Functions", "ListenOnce"), exports);
TS.exportNamespace(TS.import(script, script, "Functions", "WaitForFirstSignal"), exports);
return exports;
]]></string>
                </Properties>
                <Item class="Folder" referent="18">
                  <Properties>
                    <string name="Name">Functions</string>
                  </Properties>
                  <Item class="ModuleScript" referent="19">
                    <Properties>
                      <string name="Name">ListenOnce</string>
                      <string name="Source"><![CDATA[local exports = {}

function exports.listenOnce(signal, callback)
	local connection
	connection = signal:Connect(function(...)
		connection:Disconnect()
		callback(...)
	end)
	return connection
end

return exports
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="20">
                    <Properties>
                      <string name="Name">WaitForFirstSignal</string>
                      <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- January 24, 2020, 10:55 PM Pacific Standard Time

local TS = _G[script];
local exports = {};
local Signal = TS.import(script, script.Parent.Parent, "Implementation", "Signal").Signal;
local function waitForFirstSignal(...)
	local signals = { ... };
	local finalSignal = Signal.new();
	local connections = {};
	do
		local i = 0;
		while i < #signals do
			local _0 = i;
			local signal = signals[_0 + 1];
			connections[#connections + 1] = signal:Connect(function(...)
				local args = { ... };
				finalSignal:fire(signal, args);
			end);
			i = i + 1;
		end;
	end;
	local finalArgs = { finalSignal:Wait() };
	do
		local i = 0;
		while i < #connections do
			connections[i + 1]:Disconnect();
			i = i + 1;
		end;
	end;
	return unpack(finalArgs);
end;
exports.waitForFirstSignal = waitForFirstSignal;
return exports;
]]></string>
                    </Properties>
                  </Item>
                </Item>
                <Item class="Folder" referent="21">
                  <Properties>
                    <string name="Name">Implementation</string>
                  </Properties>
                  <Item class="ModuleScript" referent="22">
                    <Properties>
                      <string name="Name">ConnectionManager</string>
                      <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- January 24, 2020, 10:55 PM Pacific Standard Time

local exports = {};
local ConnectionManager;
do
	ConnectionManager = setmetatable({}, {
		__tostring = function() return "ConnectionManager" end;
	});
	ConnectionManager.__index = ConnectionManager;
	function ConnectionManager.new(...)
		local self = setmetatable({}, ConnectionManager);
		self:constructor(...);
		return self;
	end;
	function ConnectionManager:constructor(...)
		self._connectionData = {};
	end;
	function ConnectionManager:addConnectionData(signal, handlerFunction)
		local _0 = self._connectionData;
		_0[#_0 + 1] = {
			HandlerFunction = handlerFunction;
			Signal = signal;
		};
	end;
	function ConnectionManager:connectAll()
		do
			local i = 0;
			while i < #self._connectionData do
				local connectionInfo = self._connectionData[i + 1];
				if connectionInfo.Connection == nil then
					connectionInfo.Connection = connectionInfo.Signal:Connect(connectionInfo.HandlerFunction);
				end;
				i = i + 1;
			end;
		end;
	end;
	function ConnectionManager:connectToEvent(signal, handlerFunction)
		local connection = signal:Connect(handlerFunction);
		local _0 = self._connectionData;
		_0[#_0 + 1] = {
			Connection = connection;
			HandlerFunction = handlerFunction;
			Signal = signal;
		};
	end;
	function ConnectionManager:disconnectAll()
		do
			local i = 0;
			while i < #self._connectionData do
				local connectionInfo = self._connectionData[i + 1];
				if connectionInfo.Connection ~= nil then
					connectionInfo.Connection:Disconnect();
					connectionInfo.Connection = nil;
				end;
				i = i + 1;
			end;
		end;
	end;
	function ConnectionManager:reset()
		self:disconnectAll();
		self._connectionData = {};
	end;
end;
exports.ConnectionManager = ConnectionManager;
return exports;
]]></string>
                    </Properties>
                  </Item>
                  <Item class="ModuleScript" referent="23">
                    <Properties>
                      <string name="Name">Signal</string>
                      <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- January 24, 2020, 10:55 PM Pacific Standard Time

local TS = _G[script];
local exports = {};
local RunService = TS.import(script, TS.getModule(script, "services")).RunService;
local SignalConnection;
do
	SignalConnection = setmetatable({}, {
		__tostring = function() return "SignalConnection" end;
	});
	SignalConnection.__index = SignalConnection;
	function SignalConnection.new(...)
		local self = setmetatable({}, SignalConnection);
		self:constructor(...);
		return self;
	end;
	function SignalConnection:constructor(disconnectCallback)
		self.Connected = true;
		self._disconnectCallback = disconnectCallback;
	end;
	function SignalConnection:Disconnect()
		if not (self.Connected) then
			return nil;
		end;
		self._disconnectCallback();
		self.Connected = false;
	end;
end;
local Signal;
do
	Signal = setmetatable({}, {
		__tostring = function() return "Signal" end;
	});
	Signal.__index = Signal;
	function Signal.new(...)
		local self = setmetatable({}, Signal);
		self:constructor(...);
		return self;
	end;
	function Signal:constructor(...)
		self._connections = {};
		self._connectionsHandlersMap = {};
		self._lastFiredTick = 0;
	end;
	function Signal:Connect(onFiredCallback)
		local connection;
		connection = SignalConnection.new(function()
			if not (self._connectionsHandlersMap[connection] ~= nil) then
				return nil;
			end;
			self._connectionsHandlersMap[connection] = nil;
			do
				local i = 0;
				while i < #self._connections do
					if self._connections[i + 1] == connection then
						table.remove(self._connections, i + 1);
					end;
					i = i + 1;
				end;
			end;
		end);
		local _0 = self._connectionsHandlersMap;
		_0[connection] = onFiredCallback;
		local _1 = self._connections;
		_1[#_1 + 1] = connection;
		return connection;
	end;
	function Signal:disconnectAll()
		TS.map_clear(self._connectionsHandlersMap);
		do
			local i = 0;
			while i < #self._connections do
				self._connections[i + 1]:Disconnect();
				i = i + 1;
			end;
		end;
		self._connections = {};
	end;
	function Signal:fire(...)
		local args = { ... };
		self._lastFiredArgs = args;
		self._lastFiredTick = tick();
		do
			local i = 0;
			while i < #self._connections do
				local handlerFunction = self._connectionsHandlersMap[self._connections[i + 1]];
				if handlerFunction ~= nil then
					coroutine.wrap(handlerFunction)(unpack(args));
				end;
				i = i + 1;
			end;
		end;
	end;
	function Signal:Wait()
		local lastFiredTickAtStart = self._lastFiredTick;
		while self._lastFiredTick == lastFiredTickAtStart do
			RunService.Heartbeat:Wait();
		end;
		return unpack(self._lastFiredArgs);
	end;
end;
exports.Signal = Signal;
return exports;
]]></string>
                    </Properties>
                  </Item>
                </Item>
              </Item>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="24">
            <Properties>
              <string name="Name">out</string>
              <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- March 20, 2020, 4:35 AM Eastern Daylight Time

local TS = _G[script];
local exports = {};
TS.exportNamespace(TS.import(script, script, "Implementation", "Joystick"), exports);
TS.exportNamespace(TS.import(script, script, "Implementation", "Renderers", "FilledCircleRenderer"), exports);
TS.exportNamespace(TS.import(script, script, "Implementation", "ViewportRegions", "CircleViewportRegion"), exports);
TS.exportNamespace(TS.import(script, script, "Implementation", "ViewportRegions", "RectangleViewportRegion"), exports);
return exports;
]]></string>
            </Properties>
            <Item class="Folder" referent="25">
              <Properties>
                <string name="Name">Implementation</string>
              </Properties>
              <Item class="ModuleScript" referent="26">
                <Properties>
                  <string name="Name">Joystick</string>
                  <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- March 20, 2020, 4:35 AM Eastern Daylight Time

local TS = _G[script];
local exports = {};
local Joystick;
local Signal = TS.import(script, TS.getModule(script, "signals-tooling").out).Signal;
local Dumpster = TS.import(script, TS.getModule(script, "dumpster").Dumpster).Dumpster;
local JoysticksManager = TS.import(script, script.Parent.Parent, "Internal", "JoysticksManager").JoysticksManager;
local _0 = TS.import(script, TS.getModule(script, "services"));
local Workspace, GuiService = _0.Workspace, _0.GuiService;
do
	Joystick = setmetatable({}, {
		__tostring = function() return "Joystick" end;
	});
	Joystick.__index = Joystick;
	function Joystick.new(...)
		local self = setmetatable({}, Joystick);
		self:constructor(...);
		return self;
	end;
	function Joystick:constructor(configuration)
		self.isDestroyed = false;
		self.isActive = false;
		if configuration.initializedEnabled ~= nil then
			self.isEnabled = configuration.initializedEnabled;
		else
			self.isEnabled = false;
		end;
		if configuration.initializedVisible ~= nil then
			self.isVisible = configuration.initializedVisible;
		else
			self.isVisible = false;
		end;
		if configuration.priorityLevel ~= nil then
			self.priorityLevel = configuration.priorityLevel;
		else
			self.priorityLevel = 1;
		end;
		self.activated = Signal.new();
		self.deactivated = Signal.new();
		self.disabled = Signal.new();
		self.enabled = Signal.new();
		self.inputChanged = Signal.new();
		self.visibilityChanged = Signal.new();
		self.activationRegion = configuration.activationRegion;
		self.gutterRadiusInPixels = configuration.gutterRadiusInPixels;
		self.gutterRenderer = configuration.gutterRenderer;
		self.inactiveCenterPoint = configuration.inactiveCenterPoint;
		self.thumbRadiusInPixels = configuration.thumbRadiusInPixels;
		self.thumbRenderer = configuration.thumbRenderer;
		self.gutterCenterPoint = configuration.inactiveCenterPoint;
		self.signalsDumpster = Dumpster.new();
		self.signalsDumpster:dump(self.activated, function(signal)
			return signal:disconnectAll();
		end);
		self.signalsDumpster:dump(self.deactivated, function(signal)
			return signal:disconnectAll();
		end);
		self.signalsDumpster:dump(self.disabled, function(signal)
			return signal:disconnectAll();
		end);
		self.signalsDumpster:dump(self.enabled, function(signal)
			return signal:disconnectAll();
		end);
		self.signalsDumpster:dump(self.inputChanged, function(signal)
			return signal:disconnectAll();
		end);
		self.signalsDumpster:dump(self.visibilityChanged, function(signal)
			return signal:disconnectAll();
		end);
		JoysticksManager:registerJoystick(self);
		if self.isVisible then
			JoysticksManager:requestRender(self);
		end;
	end;
	-- static methods
	function Joystick:create(configuration)
		return Joystick.new(configuration);
	end;
	-- instance methods
	function Joystick:destroy()
		self.isDestroyed = true;
		self.signalsDumpster:burn();
		self.gutterRenderer:destroy();
		self.thumbRenderer:destroy();
		JoysticksManager:deregisterJoystick(self);
	end;
	function Joystick:setActivationRegion(newRegion)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		self.activationRegion = newRegion;
	end;
	function Joystick:setEnabled(newValue)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		if newValue ~= self.isEnabled then
			self.isEnabled = newValue;
			if newValue then
				self.enabled:fire();
			else
				self.disabled:fire();
			end;
		end;
	end;
	function Joystick:setGutterRadiusInPixels(newRadiusInPixels)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		self.gutterRadiusInPixels = newRadiusInPixels;
		JoysticksManager:requestRender(self);
	end;
	function Joystick:setGutterRenderer(newRenderer)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		self.gutterRenderer:destroy();
		self.gutterRenderer = newRenderer;
		JoysticksManager:requestRender(self);
	end;
	function Joystick:setInactiveCenterPoint(newPoint)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		self.inactiveCenterPoint = newPoint;
		if not (self.isActive) then
			JoysticksManager:requestRender(self);
		end;
	end;
	function Joystick:setPriorityLevel(newPriorityLevel)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		self.priorityLevel = newPriorityLevel;
		JoysticksManager:requestRender(self);
	end;
	function Joystick:setThumbRadiusInPixels(newRadiusInPixels)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		self.thumbRadiusInPixels = newRadiusInPixels;
		JoysticksManager:requestRender(self);
	end;
	function Joystick:setThumbRenderer(newRenderer)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		self.thumbRenderer:destroy();
		self.thumbRenderer = newRenderer;
		JoysticksManager:requestRender(self);
	end;
	function Joystick:setVisible(newValue)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		if self.isVisible ~= newValue then
			self.isVisible = newValue;
			if newValue then
				self.gutterRenderer:hide();
				self.thumbRenderer:hide();
			else
				JoysticksManager:requestRender(self);
			end;
			self.visibilityChanged:fire(newValue);
		end;
	end;
	function Joystick:activate(inputPoint)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		local viewportSize = self:getViewportSize();
		local newGutterCenter = inputPoint;
		if inputPoint.X - self.gutterRadiusInPixels < 0 then
			newGutterCenter = Vector2.new(self.gutterRadiusInPixels, newGutterCenter.Y);
		elseif inputPoint.X + self.gutterRadiusInPixels > viewportSize.X then
			newGutterCenter = Vector2.new(viewportSize.X - self.gutterRadiusInPixels, newGutterCenter.Y);
		end;
		if inputPoint.Y - self.gutterRadiusInPixels < 0 then
			newGutterCenter = Vector2.new(newGutterCenter.X, self.gutterRadiusInPixels);
		elseif inputPoint.Y + self.gutterRadiusInPixels > viewportSize.Y then
			newGutterCenter = Vector2.new(newGutterCenter.X, viewportSize.Y - self.gutterRadiusInPixels);
		end;
		self.gutterCenterPoint = newGutterCenter;
		local initialInput = self:calculateInput(inputPoint);
		self.input = initialInput;
		self.isActive = true;
		self.activated:fire(initialInput);
	end;
	function Joystick:deactivate()
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		self.gutterCenterPoint = self.inactiveCenterPoint;
		local finalInput = self.input;
		self.input = nil;
		self.isActive = false;
		self.activated:fire(finalInput);
	end;
	function Joystick:render(gutterScreenGui, thumbScreenGui)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		local effectiveGutterRadius = self:calculateEffectiveGutterRadius();
		local thumbCenterPoint;
		if self.input ~= nil then
			thumbCenterPoint = self.gutterCenterPoint + ((self.input * (effectiveGutterRadius)));
		else
			thumbCenterPoint = self.gutterCenterPoint;
		end;
		self.gutterRenderer:render(self.gutterCenterPoint, self.gutterRadiusInPixels, self.priorityLevel, gutterScreenGui);
		self.thumbRenderer:render(thumbCenterPoint, self.thumbRadiusInPixels, self.priorityLevel, thumbScreenGui);
	end;
	function Joystick:updateInput(inputPoint)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		if not (self.isActive) then
			error("Cannot update an inactive instance's input");
		end;
		local newInput = self:calculateInput(inputPoint);
		self.input = newInput;
		self.inputChanged:fire(newInput);
	end;
	function Joystick:calculateEffectiveGutterRadius()
		return self.gutterRadiusInPixels - self.thumbRadiusInPixels;
	end;
	function Joystick:calculateInput(inputPoint)
		local effectiveGutterRadius = self:calculateEffectiveGutterRadius();
		local inputDisplacementFromGutterCenter = (inputPoint - (self.gutterCenterPoint));
		local newInput = Vector2.new();
		if inputDisplacementFromGutterCenter.Magnitude > 0 then
			newInput = (inputDisplacementFromGutterCenter.Unit * (math.clamp(inputDisplacementFromGutterCenter.Magnitude / effectiveGutterRadius, -1, 1)));
		end;
		return newInput;
	end;
	function Joystick:getViewportSize()
		if Workspace.CurrentCamera == nil then
			error("Cannot get viewport size because CurrentCamera is undefined");
		end;
		local guiInsetTopLeft, guiInsetBottomRight = GuiService:GetGuiInset();
		local viewportTopLeft = guiInsetTopLeft;
		local viewportBottomRight = (Workspace.CurrentCamera.ViewportSize - (guiInsetBottomRight));
		local viewportSize = (viewportBottomRight - (viewportTopLeft));
		return viewportSize;
	end;
end;
exports.Joystick = Joystick;
return exports;
]]></string>
                </Properties>
              </Item>
              <Item class="Folder" referent="27">
                <Properties>
                  <string name="Name">Renderers</string>
                </Properties>
                <Item class="ModuleScript" referent="28">
                  <Properties>
                    <string name="Name">FilledCircleRenderer</string>
                    <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- March 20, 2020, 4:35 AM Eastern Daylight Time

local exports = {};
local IMAGE_ASSET = "rbxassetid://4798571099";
local FilledCircleRenderer;
do
	FilledCircleRenderer = setmetatable({}, {
		__tostring = function() return "FilledCircleRenderer" end;
	});
	FilledCircleRenderer.__index = FilledCircleRenderer;
	function FilledCircleRenderer.new(...)
		local self = setmetatable({}, FilledCircleRenderer);
		self:constructor(...);
		return self;
	end;
	function FilledCircleRenderer:constructor(color, transparency)
		self.isDestroyed = false;
		local imageLabel = Instance.new("ImageLabel");
		imageLabel.AnchorPoint = Vector2.new(0.5, 0.5);
		imageLabel.BackgroundTransparency = 1;
		imageLabel.Image = IMAGE_ASSET;
		imageLabel.ImageColor3 = color;
		if transparency ~= nil then
			imageLabel.ImageTransparency = transparency;
		else
			imageLabel.ImageTransparency = 0;
		end;
		self.imageLabel = imageLabel;
	end;
	function FilledCircleRenderer:destroy()
		self.imageLabel:Destroy();
		self.isDestroyed = true;
	end;
	function FilledCircleRenderer:hide()
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		self.imageLabel.Parent = nil;
	end;
	function FilledCircleRenderer:render(absoluteCenter, radiusInPixels, zIndex, parent)
		if self.isDestroyed then
			error("Instance is destroyed");
		end;
		self.imageLabel.Parent = nil;
		self.imageLabel.Position = UDim2.new(0, absoluteCenter.X, 0, absoluteCenter.Y);
		self.imageLabel.Size = UDim2.new(0, 2 * radiusInPixels, 0, 2 * radiusInPixels);
		self.imageLabel.ZIndex = zIndex;
		self.imageLabel.Parent = parent;
	end;
end;
exports.FilledCircleRenderer = FilledCircleRenderer;
return exports;
]]></string>
                  </Properties>
                </Item>
              </Item>
              <Item class="Folder" referent="29">
                <Properties>
                  <string name="Name">ViewportRegions</string>
                </Properties>
                <Item class="ModuleScript" referent="30">
                  <Properties>
                    <string name="Name">CircleViewportRegion</string>
                    <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- March 20, 2020, 4:35 AM Eastern Daylight Time

local exports = {};
local CircleViewportRegion;
do
	CircleViewportRegion = setmetatable({}, {
		__tostring = function() return "CircleViewportRegion" end;
	});
	CircleViewportRegion.__index = CircleViewportRegion;
	function CircleViewportRegion.new(...)
		local self = setmetatable({}, CircleViewportRegion);
		self:constructor(...);
		return self;
	end;
	function CircleViewportRegion:constructor(centerPoint, radiusInPixels)
		self.centerPoint = centerPoint;
		self.radiusInPixels = radiusInPixels;
	end;
	function CircleViewportRegion:isPointInRegion(point)
		local displacement = (self.centerPoint - (point));
		local isWithinRadius = displacement.Magnitude <= self.radiusInPixels;
		return isWithinRadius;
	end;
end;
exports.CircleViewportRegion = CircleViewportRegion;
return exports;
]]></string>
                  </Properties>
                </Item>
                <Item class="ModuleScript" referent="31">
                  <Properties>
                    <string name="Name">RectangleViewportRegion</string>
                    <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- March 20, 2020, 4:35 AM Eastern Daylight Time

local exports = {};
local RectangleViewportRegion;
do
	RectangleViewportRegion = setmetatable({}, {
		__tostring = function() return "RectangleViewportRegion" end;
	});
	RectangleViewportRegion.__index = RectangleViewportRegion;
	function RectangleViewportRegion.new(...)
		local self = setmetatable({}, RectangleViewportRegion);
		self:constructor(...);
		return self;
	end;
	function RectangleViewportRegion:constructor(topLeft, bottomRight)
		self.topLeft = topLeft;
		self.bottomRight = bottomRight;
	end;
	function RectangleViewportRegion:isPointInRegion(point)
		local _0 = self.topLeft.X <= point.X;
		local isInXBounds = _0 and point.X <= self.bottomRight.X;
		local _1 = self.topLeft.Y <= point.Y;
		local isInYBounds = _1 and point.Y <= self.bottomRight.Y;
		local _2 = isInXBounds;
		return _2 and isInYBounds;
	end;
end;
exports.RectangleViewportRegion = RectangleViewportRegion;
return exports;
]]></string>
                  </Properties>
                </Item>
              </Item>
            </Item>
            <Item class="Folder" referent="32">
              <Properties>
                <string name="Name">Internal</string>
              </Properties>
              <Item class="ModuleScript" referent="33">
                <Properties>
                  <string name="Name">JoysticksManager</string>
                  <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- March 20, 2020, 4:35 AM Eastern Daylight Time

local TS = _G[script];
local exports = {};
local _0 = TS.import(script, TS.getModule(script, "services"));
local Players, UserInputService = _0.Players, _0.UserInputService;
local JoysticksManagerSingleton;
do
	JoysticksManagerSingleton = setmetatable({}, {
		__tostring = function() return "JoysticksManagerSingleton" end;
	});
	JoysticksManagerSingleton.__index = JoysticksManagerSingleton;
	function JoysticksManagerSingleton.new(...)
		local self = setmetatable({}, JoysticksManagerSingleton);
		self:constructor(...);
		return self;
	end;
	function JoysticksManagerSingleton:constructor()
		self.joysticks = {};
		self.inactiveGuttersScreenGui = self:createScreenGui(1, "Joysticks_InactiveGutters");
		self.inactiveThumbsScreenGui = self:createScreenGui(2, "Joysticks_InactiveThumbs");
		self.activeGuttersScreenGui = self:createScreenGui(3, "Joysticks_ActiveGutters");
		self.activeThumbsScreenGui = self:createScreenGui(4, "Joysticks_ActiveThumbs");
		self.activeJoysticksByTouchInputObject = {};
		self.touchInputObjectsByActiveJoystick = {};
		self:listenForTouchEvents();
	end;
	function JoysticksManagerSingleton:deregisterJoystick(oldJoystick)
		local newArray = {};
		local _1 = self.joysticks;
		for _2 = 1, #_1 do
			local existingJoystick = _1[_2];
			if existingJoystick ~= oldJoystick then
				newArray[#newArray + 1] = existingJoystick;
			end;
		end;
		local activeTouchInputObject = self.touchInputObjectsByActiveJoystick[oldJoystick];
		if activeTouchInputObject ~= nil then
			self.activeJoysticksByTouchInputObject[activeTouchInputObject] = nil;
			self.touchInputObjectsByActiveJoystick[oldJoystick] = nil;
		end;
		self.joysticks = newArray;
	end;
	function JoysticksManagerSingleton:requestRender(joystick)
		self:renderJoystick(joystick);
	end;
	function JoysticksManagerSingleton:registerJoystick(newJoystick)
		local newArray = {};
		local hasNewJoystickBeenAddedYet = false;
		local _1 = self.joysticks;
		for _2 = 1, #_1 do
			local existingJoystick = _1[_2];
			local _continue_0 = false;
			repeat
				if (not (existingJoystick.isEnabled)) or (not (existingJoystick.isVisible)) then
					_continue_0 = true; break;
				end;
				if (not (hasNewJoystickBeenAddedYet)) and (newJoystick.priorityLevel < existingJoystick.priorityLevel) then
					newArray[#newArray + 1] = newJoystick;
					hasNewJoystickBeenAddedYet = true;
				end;
				newArray[#newArray + 1] = existingJoystick;
				_continue_0 = true;
			until true;
			if not _continue_0 then
				break;
			end;
		end;
		if not (hasNewJoystickBeenAddedYet) then
			newArray[#newArray + 1] = newJoystick;
		end;
		self.joysticks = newArray;
	end;
	function JoysticksManagerSingleton:createScreenGui(displayOrder, name)
		local screenGui = Instance.new("ScreenGui");
		screenGui.DisplayOrder = 1;
		screenGui.Name = name;
		screenGui.ResetOnSpawn = false;
		screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
		screenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui");
		return screenGui;
	end;
	function JoysticksManagerSingleton:listenForTouchEvents()
		UserInputService.TouchStarted:Connect(function(inputObject, didGameProcessEvent)
			if didGameProcessEvent then
				return nil;
			end;
			local inputPoint = Vector2.new(inputObject.Position.X, inputObject.Position.Y);
			for i = #self.joysticks - 1, 0, -1 do
				local joystick = self.joysticks[i + 1];
				if joystick.activationRegion:isPointInRegion(inputPoint) then
					if joystick.isActive then
						return nil;
					end;
					local _1 = self.activeJoysticksByTouchInputObject;
					_1[inputObject] = joystick;
					local _2 = self.touchInputObjectsByActiveJoystick;
					_2[joystick] = inputObject;
					joystick:activate(inputPoint);
					self:renderJoystick(joystick);
				end;
			end;
		end);
		UserInputService.TouchMoved:Connect(function(inputObject)
			local activeJoystick = self.activeJoysticksByTouchInputObject[inputObject];
			if activeJoystick == nil then
				return nil;
			end;
			local inputPoint = Vector2.new(inputObject.Position.X, inputObject.Position.Y);
			activeJoystick:updateInput(inputPoint);
			self:renderJoystick(activeJoystick);
		end);
		UserInputService.TouchEnded:Connect(function(inputObject)
			local activeJoystick = self.activeJoysticksByTouchInputObject[inputObject];
			if activeJoystick == nil then
				return nil;
			end;
			self.activeJoysticksByTouchInputObject[inputObject] = nil;
			self.touchInputObjectsByActiveJoystick[activeJoystick] = nil;
			activeJoystick:deactivate();
			self:renderJoystick(activeJoystick);
		end);
	end;
	function JoysticksManagerSingleton:renderJoystick(joystick)
		if joystick.isActive then
			joystick:render(self.activeGuttersScreenGui, self.activeThumbsScreenGui);
		else
			joystick:render(self.inactiveGuttersScreenGui, self.inactiveThumbsScreenGui);
		end;
	end;
end;
local JoysticksManager = JoysticksManagerSingleton.new();
exports.JoysticksManagerSingleton = JoysticksManagerSingleton;
exports.JoysticksManager = JoysticksManager;
return exports;
]]></string>
                </Properties>
              </Item>
            </Item>
          </Item>
        </Item>
      </Item>
    </Item>
  </Item>
  <Item class="ServerScriptService" referent="34">
    <Properties>
      <string name="Name">ServerScriptService</string>
    </Properties>
    <Item class="Folder" referent="35">
      <Properties>
        <string name="Name">TS</string>
      </Properties>
      <Item class="Script" referent="36">
        <Properties>
          <string name="Name">main</string>
          <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- March 20, 2020, 4:41 AM Eastern Daylight Time

local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"));
local makeHello = TS.import(script, game:GetService("ReplicatedStorage"), "TS", "module").makeHello;
print(makeHello("main.server.ts"));
]]></string>
        </Properties>
      </Item>
    </Item>
  </Item>
  <Item class="StarterPlayer" referent="37">
    <Properties>
      <string name="Name">StarterPlayer</string>
    </Properties>
    <Item class="StarterPlayerScripts" referent="38">
      <Properties>
        <string name="Name">StarterPlayerScripts</string>
      </Properties>
      <Item class="Folder" referent="39">
        <Properties>
          <string name="Name">TS</string>
        </Properties>
        <Item class="LocalScript" referent="40">
          <Properties>
            <string name="Name">main</string>
            <string name="Source"><![CDATA[-- Compiled with https://roblox-ts.github.io v0.3.0
-- March 20, 2020, 4:41 AM Eastern Daylight Time

local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"));
local _0 = TS.import(script, TS.getModule(script, "touch-screen-joysticks").out);
local Joystick, RectangleViewportRegion, FilledCircleRenderer = _0.Joystick, _0.RectangleViewportRegion, _0.FilledCircleRenderer;
local _1 = TS.import(script, TS.getModule(script, "services"));
local Workspace, UserInputService, GuiService = _1.Workspace, _1.UserInputService, _1.GuiService;
repeat
	do
		wait();
	end;
until not (not (Workspace.CurrentCamera));
wait(5);
UserInputService.ModalEnabled = true;
local guiInsetTopLeft, guiInsetBottomRight = GuiService:GetGuiInset();
local realTopLeft = guiInsetTopLeft;
local realBottomRight = (Workspace.CurrentCamera.ViewportSize - (guiInsetBottomRight));
local viewportSize = (realBottomRight - (realTopLeft));
local leftJoystick = Joystick:create({
	activationRegion = RectangleViewportRegion.new(Vector2.new(0, 0), Vector2.new(viewportSize.X / 2, viewportSize.Y));
	gutterRadiusInPixels = 50;
	gutterRenderer = FilledCircleRenderer.new(Color3.fromRGB(0, 170, 255), 0.8);
	inactiveCenterPoint = Vector2.new(80, viewportSize.Y - 80);
	thumbRadiusInPixels = 30;
	thumbRenderer = FilledCircleRenderer.new(Color3.fromRGB(0, 170, 255), 0);
	initializedEnabled = true;
	initializedVisible = true;
	priorityLevel = 1;
});
local rightJoystick = Joystick:create({
	activationRegion = RectangleViewportRegion.new(Vector2.new(viewportSize.X / 2, 0), Vector2.new(viewportSize.X, viewportSize.Y));
	gutterRadiusInPixels = 50;
	gutterRenderer = FilledCircleRenderer.new(Color3.fromRGB(255, 85, 0), 0.8);
	inactiveCenterPoint = Vector2.new(viewportSize.X - 80, viewportSize.Y - 80);
	thumbRadiusInPixels = 30;
	thumbRenderer = FilledCircleRenderer.new(Color3.fromRGB(255, 85, 0), 0);
	initializedEnabled = true;
	initializedVisible = true;
	priorityLevel = 1;
});
UserInputService.TouchStarted:Connect(function(inputObject)
	print("touchpos", inputObject.Position);
end);
]]></string>
          </Properties>
        </Item>
      </Item>
    </Item>
  </Item>
</roblox>